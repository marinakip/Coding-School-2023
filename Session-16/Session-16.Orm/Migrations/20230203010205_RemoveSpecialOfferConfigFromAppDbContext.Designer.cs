// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Session_16.Orm.Context;

#nullable disable

namespace Session16.Orm.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230203010205_RemoveSpecialOfferConfigFromAppDbContext")]
    partial class RemoveSpecialOfferConfigFromAppDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Session_16.Model.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Session_16.Model.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("SalaryPerMonth")
                        .HasColumnType("float");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeEmployee")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Session_16.Model.MonthlyLedger", b =>
                {
                    b.Property<Guid>("MonthlyLedgerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Expenses")
                        .HasPrecision(12, 2)
                        .HasColumnType("float(12)");

                    b.Property<double>("Income")
                        .HasPrecision(12, 2)
                        .HasColumnType("float(12)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasPrecision(12, 2)
                        .HasColumnType("float(12)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("MonthlyLedgerID");

                    b.ToTable("MonthlyLedger", (string)null);
                });

            modelBuilder.Entity("Session_16.Model.Pet", b =>
                {
                    b.Property<Guid>("PetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<double>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("PetID");

                    b.ToTable("Pet", (string)null);
                });

            modelBuilder.Entity("Session_16.Model.PetFood", b =>
                {
                    b.Property<Guid>("PetFoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnimalType")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<double>("PetFoodCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<double>("PetFoodPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.HasKey("PetFoodID");

                    b.ToTable("PetFood", (string)null);
                });

            modelBuilder.Entity("Session_16.Model.PetReport", b =>
                {
                    b.Property<Guid>("PetReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Month")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("TotalSold")
                        .HasPrecision(10, 2)
                        .HasColumnType("int");

                    b.Property<int>("TypeAnimal")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("PetReportID");

                    b.ToTable("PetReport", (string)null);
                });

            modelBuilder.Entity("Session_16.Model.SpecialOffer", b =>
                {
                    b.Property<Guid>("SpecialOfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetFoodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PetFoodPrice")
                        .HasColumnType("float");

                    b.HasKey("SpecialOfferID");

                    b.HasIndex("PetFoodID")
                        .IsUnique();

                    b.ToTable("SpecialOffer");
                });

            modelBuilder.Entity("Session_16.Model.Transaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeID")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Session_16.Model.TransactionLine", b =>
                {
                    b.Property<Guid>("TransactionLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LineTotal")
                        .HasColumnType("float");

                    b.Property<double>("PetFoodCost")
                        .HasColumnType("float");

                    b.Property<Guid>("PetFoodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PetFoodPrice")
                        .HasColumnType("float");

                    b.Property<int>("PetFoodQty")
                        .HasColumnType("int");

                    b.Property<Guid>("PetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PetPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("SpecialOfferID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionLineID");

                    b.HasIndex("PetFoodID")
                        .IsUnique();

                    b.HasIndex("PetID")
                        .IsUnique();

                    b.HasIndex("SpecialOfferID")
                        .IsUnique();

                    b.HasIndex("TransactionID");

                    b.ToTable("TransactionLine");
                });

            modelBuilder.Entity("Session_16.Model.SpecialOffer", b =>
                {
                    b.HasOne("Session_16.Model.PetFood", "PetFood")
                        .WithOne("SpecialOffer")
                        .HasForeignKey("Session_16.Model.SpecialOffer", "PetFoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetFood");
                });

            modelBuilder.Entity("Session_16.Model.Transaction", b =>
                {
                    b.HasOne("Session_16.Model.Customer", "Customer")
                        .WithOne("Transaction")
                        .HasForeignKey("Session_16.Model.Transaction", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session_16.Model.Employee", "Employee")
                        .WithOne("Transaction")
                        .HasForeignKey("Session_16.Model.Transaction", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Session_16.Model.TransactionLine", b =>
                {
                    b.HasOne("Session_16.Model.PetFood", "PetFood")
                        .WithOne("TransactionLine")
                        .HasForeignKey("Session_16.Model.TransactionLine", "PetFoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session_16.Model.Pet", "Pet")
                        .WithOne("TransactionLine")
                        .HasForeignKey("Session_16.Model.TransactionLine", "PetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session_16.Model.SpecialOffer", "SpecialOffer")
                        .WithOne("TransactionLine")
                        .HasForeignKey("Session_16.Model.TransactionLine", "SpecialOfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session_16.Model.Transaction", "Transaction")
                        .WithMany("TransactionLines")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("PetFood");

                    b.Navigation("SpecialOffer");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Session_16.Model.Customer", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("Session_16.Model.Employee", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("Session_16.Model.Pet", b =>
                {
                    b.Navigation("TransactionLine")
                        .IsRequired();
                });

            modelBuilder.Entity("Session_16.Model.PetFood", b =>
                {
                    b.Navigation("SpecialOffer")
                        .IsRequired();

                    b.Navigation("TransactionLine")
                        .IsRequired();
                });

            modelBuilder.Entity("Session_16.Model.SpecialOffer", b =>
                {
                    b.Navigation("TransactionLine")
                        .IsRequired();
                });

            modelBuilder.Entity("Session_16.Model.Transaction", b =>
                {
                    b.Navigation("TransactionLines");
                });
#pragma warning restore 612, 618
        }
    }
}
