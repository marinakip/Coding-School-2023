@page "/items/edit/{Id:guid?}"

@using FuelStation.Model.Enumerations;
@using FuelStation.Web.Blazor.Shared.ItemDataTransferObjects;
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Items Edit</PageTitle>

<h3 class="display-3">Items</h3>
<h4>Create/Edit</h4>

<style>
    body {
        background-color: #FAF8F1
    }

    h3 {
        font-weight: bold;
    }
</style>

@if (Item == null) {

    <p>Loading ...</p>

} else {
    <EditForm Model="Item" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Code</label>
                <input type="text" class="form-control" @bind="@Item.Code" disabled/>
            </div>
            <div class="col-md-6">
                <label class="form-label">Description</label>
                <InputText class="form-control" @bind-Value="@Item.Description" />
                <ValidationMessage For="@(()=>Item.Description)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Select Item Type</label>
                <InputSelect class="form-control" @bind-Value="@Item.ItemType">
                    @foreach (var type in Enum.GetValues<ItemType>()) {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>Item.ItemType)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Price</label>
                <InputNumber class="form-control" @bind-Value="@Item.Price" />
                <ValidationMessage For="@(()=>Item.Price)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Cost</label>
                <InputNumber class="form-control" @bind-Value="@Item.Cost" />
                <ValidationMessage For="@(()=>Item.Cost)" />
            </div>
        </div>

        <div class="row mt-2">
            <div class="col">
                <button class="btn btn-success" type="submit">Save</button>
                <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
            </div>
        </div>
    </EditForm>

}

@code {
    [Parameter] public Guid? Id { get; set; }
    ItemEditDto? Item { get; set; }


    protected override async Task OnInitializedAsync() {        
        try {
            Item = await httpClient.GetFromJsonAsync<ItemEditDto>($"item/{Id}");
        } catch (Exception ex) {
            navigationManager.NavigateTo($"/error/{ex.Message}");
        }
    }

    private void OnCancel() {
        navigationManager.NavigateTo("items");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        response = await httpClient.PutAsJsonAsync("item", Item);             
        try {
            response.EnsureSuccessStatusCode();
            navigationManager.NavigateTo("items");
        } catch {
            navigationManager.NavigateTo($"/error/{response.StatusCode}");
        }
    }
}
