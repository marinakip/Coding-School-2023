@page "/customers"
@using FuelStation.Web.Blazor.Shared.CustomerDataTransferObjects;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Customers</PageTitle>
<h3 class="display-3">Customers</h3>

<style>
    body {
        background-color: #FAF8F1
    }

    .main-btn {
        margin-top: 15px;
        margin-bottom: 15px;
    }

    h3 {
        border-bottom: double;
    }
</style>

@if (isLoading) {
    <div class="spinner-border text-success" role="status">
        <span class="sr-only"></span>
    </div>
    <p style="color:purple">Loading...</p>
} else {
    <button class="btn btn-success btn-lg main-btn" @onclick="CreateItem">Create New +</button>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Loyalty Card Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList) {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(customer)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(customer)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    private List<CustomerListDto> customerList = new();

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        try {
            customerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");           
        } catch (Exception ex){             
            navigationManager.NavigateTo($"/error/{ex.Message}");
        }
    }

    private void CreateItem() {
        navigationManager.NavigateTo("customers/create");
    }

    private void EditItem(CustomerListDto customer) {
        navigationManager.NavigateTo($"customers/edit/{customer.Id}");
    }

    private async Task DeleteItem(CustomerListDto customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Delete customer {customer.Name} {customer.Surname}. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"customer/{customer.Id}");
            try {
                response.EnsureSuccessStatusCode();
                await LoadItemsFromServer();
            } catch {
                navigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
            
        }
    }
}
