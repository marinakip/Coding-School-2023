@page "/employees/create"

@using FuelStation.Model.Enumerations;
@using FuelStation.Web.Blazor.Shared.EmployeeDataTranferObjects;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Employee Create</h3>

@if (Employee == null) {
    <p>Loading ...</p>

} else {
     <EditForm Model="Employee" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="@Employee.Name" />
                <ValidationMessage For="@(()=>Employee.Name)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Surname</label>
                <InputText class="form-control" @bind-Value="@Employee.Surname" />
                <ValidationMessage For="@(()=>Employee.Surname)" />
            </div>
            <div class="col-md-6">
                <label for="hireDateStart" class="form-label">Choose Hire Date Start</label>
                <InputDate id="hireDateStart" @bind-Value="@Employee.HireDateStart" />
                <ValidationMessage For="@(()=>Employee.HireDateStart)" />
            </div>
            <div class="col-md-6">
                <label for="hireDateEnd" class="form-label">Choose Hire Date End</label>
                <InputDate id="hireDateEnd" @bind-Value="@Employee.HireDateEnd" />
                <ValidationMessage For="@(()=>Employee.HireDateEnd)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Sallary Per Month</label>
                <InputNumber class="form-control" @bind-Value="@Employee.SallaryPerMonth" />
                <ValidationMessage For="@(()=>Employee.SallaryPerMonth)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Select Employee Type</label>
                <select class="form-control" @bind="@Employee.EmployeeType">
                    @foreach (var type in Enum.GetValues<EmployeeType>()) {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
        </div>

        <div class="row mt-2">
            <div class="col">               
                <button class="btn btn-success" type ="submit">Save</button>
                <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
            </div>
        </div>
    </EditForm>

}

@code {
    [Parameter] public Guid? Id { get; set; }
    EmployeeCreateDto? Employee { get; set; }

    private List<EmployeeListDto> employeeList = new();

    protected override async Task OnInitializedAsync() {
        Employee = new();
    }

    private void OnCancel() {
        navigationManager.NavigateTo("employees");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        await LoadEmployeesFromServer();

        if (EmployeesHaveCapacity()) {
            response = await httpClient.PostAsJsonAsync("employee", Employee);
            try {
                response.EnsureSuccessStatusCode();
                navigationManager.NavigateTo("employees");
            } catch {
                navigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        } else {
            var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "There are no available job positions at this moment. Can't proceed with hire");
            if (confirm) {
                navigationManager.NavigateTo("employees");
            } else {
                navigationManager.NavigateTo("employees");
            }
        }             
    }

    private bool EmployeesHaveCapacity() {
        int ManagersTotal = 0;
        int StaffTotal = 0;
        int CashiersTotal = 0;

        foreach (var employee in employeeList) {
            if (employee.EmployeeType.Equals(EmployeeType.Manager)) {
                ManagersTotal++;
            }
            else if (employee.EmployeeType.Equals(EmployeeType.Staff)) {
                StaffTotal++;
            } 
            else if (employee.EmployeeType.Equals(EmployeeType.Cashier)){
                CashiersTotal++;
            }
        } 

        if(ManagersTotal > 2 || StaffTotal > 9 || CashiersTotal > 3) {
            return false;
        } else {
            return true;
        }        
    }

    private async Task LoadEmployeesFromServer() {
        try {
            employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
        } catch (Exception ex) {
            navigationManager.NavigateTo($"/error/{ex.Message}");
        }
    }
}
